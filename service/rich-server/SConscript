#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# 'service' sub-project main build script
#
##

Import('env')

if env.get('RELEASE'):
	env.AppendUnique(CCFLAGS = ['-Os'])
	env.AppendUnique(CPPDEFINES = ['NDEBUG'])
else:
	env.AppendUnique(CCFLAGS = ['-g'])


lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')
rich_server_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
######################################################################
# Build flags
######################################################################
#rich_server_env.AppendUnique(CPPPATH = ['../../extlibs/cjson'])
#rich_server_env.AppendUnique(CPPPATH = ['../../resource/csdk/connectivity/api'])
rich_server_env.AppendUnique(CPPPATH = ['include'])
rich_server_env.AppendUnique(CPPPATH = ['../resource-encapsulation/include'])
rich_server_env.AppendUnique(CPPPATH = ['../resource-encapsulation/src/common/primitiveResource/include'])
rich_server_env.AppendUnique(CPPPATH = ['../resource-encapsulation/src/common/expiryTimer/include'])
rich_server_env.AppendUnique(CPPPATH = ['../resource-hosting/src'])
rich_server_env.AppendUnique(CPPPATH = ['../../resource/include'])
rich_server_env.AppendUnique(CPPPATH = ['../../resource/csdk/stack/include'])


rich_server_env.AppendUnique(LIBS = [
    'resource_hosting',
    'rcs_client',
    'rcs_server',
    'rcs_common',
    'oc',
    'octbstack',
    'oc_logger',
    'connectivity_abstraction',
    'libcoap'
    ])

if env.get('SECURED') == '1':
    rich_server_env.AppendUnique(LIBS = ['tinydtls'])
if 'rt' in rich_server_env.get('LIBS'):
    rich_server_env.Append(LIBS = ['rt'])

if target_os not in ['windows', 'winrt']:
	rich_server_env.AppendUnique(CXXFLAGS = ['-O2', '-g', '-Wall', '-fmessage-length=0', '-std=c++0x'])

if target_os not in ['darwin', 'ios', 'windows', 'winrt']:
	rich_server_env.AppendUnique(LINKFLAGS = ['-Wl,--no-undefined'])

if target_os == 'linux':
	rich_server_env.AppendUnique(LIBS = ['pthread'])

if target_os == 'android':
	rich_server_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
	rich_server_env.AppendUnique(LIBS = ['gnustl_shared','log'])

	if not env.get('RELEASE'):
		rich_server_env.AppendUnique(LIBS = ['log'])

####################################################################
# Source files and Targets
######################################################################
rich_server_src = 'src/rich_server.cpp'

RichServer_static = rich_server_env.StaticLibrary('rich_server', rich_server_src)
RichServer_shared = rich_server_env.SharedLibrary('rich_server', rich_server_src)

rich_server_env.InstallTarget([RichServer_static, RichServer_shared], 'librich_server')
rich_server_env.UserInstallTargetLib([RichServer_static, RichServer_shared], 'librich_server')

#mprichserver = rich_server_env.Program('mprichserver', 'src/rich_server.cpp')

######################################################################
# Program
######################################################################
SConscript('program/SConscript')



	
